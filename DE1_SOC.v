
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC(

	//////////// ADC //////////
	inout 		          		ADC_CS_N,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// IR //////////
	input 		          		IRDA_RXD,
	output		          		IRDA_TXD,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		     [7:0]		VGA_B,
	output		          		VGA_BLANK_N,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire   [17:0]  dataa_imag;
wire   [17:0]  dataa_real;
wire 	dataa_imag_sign; 								// 1bit sign
wire 	dataa_real_sign; 								// 1bit sign
wire   [17:0]  datab_imag;
wire   [17:0]  datab_real;
wire 	datab_imag_sign; 								// 1bit sign
wire 	datab_real_sign; 								// 1bit sign
wire   [35:0]  result_imag;
wire   [35:0]  result_real;
wire 	result_imag_sign; 							// 1bit sign
wire 	result_real_sign; 							// 1bit sign
wire	 [23:0]	result2seg;  						// 24 (6x4) bit to display on 4x7seg

wire CLOCK_ALT;
wire [31:0] LedCntr;
wire [31:0] Sqrt2_1;


//=======================================================
//  Structural coding
//=======================================================

assign Sqrt2_1 = 32'h3F3504F3;					// 32 bit Floating Point representation of 1/SQRT(2) (Hex)

//assign dataa_real = 16'hB504;					// 16 MSB to dataa //investigate how to get more accuracy 
assign datab_real = SW[8:0];						// 9 bits manual input
assign dataa_imag = 1'h0;							// set img to 0
assign datab_imag = 1'h0;							// set img to 0

assign rst = !KEY[0];								// need reset signal manual 
assign LEDR = LedCntr[31:22];						// just to visualize the running clock
//assign result2seg = result_real[25:2];

assign result2seg = SW[9] ? result_real[25:2] : dataa_real[17:2]; //SW9 display 1=result 0=dataa

PLLClk pll0 (											// PLL to increase the clock speed (>50MHz) 
	.pll_0_outclk0_clk(CLOCK_ALT), 				// pll_0_outclk0.clk
	.pll_0_refclk_clk(CLOCK_50),  				// pll_0_refclk.clk
	.pll_0_reset_reset(rst)  						// pll_0_reset.reset
	);

Cntr c0 (
	.clk(CLOCK_ALT),
	.ena(1'b1),
	.rst(rst),
	.sload(1'b0),
	.sdata(),
	.sclear(1'b0),
	.q(LedCntr)
	);
defparam c0 .WIDTH = 32;

mgbuq m1
	( 
	.clock(CLOCK_50),
	.dataa_imag(dataa_imag),
	.dataa_real(dataa_real),
	.datab_imag(datab_imag),
	.datab_real(datab_real),
	.result_imag(result_imag),
	.result_real(result_real)
	);

Bin_to_6x_7seg s0 (
	.oSeg0(HEX0),
	.oSeg1(HEX1),
	.oSeg2(HEX2),
	.oSeg3(HEX3),
	.oSeg4(HEX4),
	.oSeg5(HEX5),
	.iDig(result2seg)
	);


float_to_fixed flfi0 (
	.float_in(Sqrt2_1),
	.fixed_sign(dataa_real_sign),
	.fixed_mag(dataa_real)
);	
defparam flfi0 .FIXED_WIDTH = 18;
defparam flfi0 .FIXED_FRACTIONAL = 18;

fixed_to_float fifl0 (
	.fixed_sign(),
	.fixed_mag(),
	.float_out()
);

defparam fifl0 .FIXED_WIDTH = 18; 
defparam fifl0 .FIXED_FRACTIONAL = 18;

endmodule
